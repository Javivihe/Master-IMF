set.seed(42)
cv.ridge <- cv.glmnet(X_train, y_train, family='gaussian', alpha=0, type.measure='mse')
plot(cv.ridge)
cv.ridge$lambda.min
min(cv.ridge$cvm)
#Se importa glmnet y se ejecuta para obtener el modelo Lasso, con *MSE*
library(glmnet)
set.seed(42)
cv.lasso <- cv.glmnet(X_train, y_train,family='gaussian',  alpha=1, type.measure='mse')
plot(cv.lasso)
cv.lasso$lambda.min
min(cv.lasso$cvm)
#Valorando el uso del One Hot Encoder
datasetONE <- model.matrix(salary~.-1, dataset)
train <- datasetONE[1:317,]
test<- datasetONE[318:397,]
X_train_one <- data.matrix(datasetONE[,1:5])
y_train_one <- data.matrix(datasetONE[,6])
X_test_one <- data.matrix(datasetONE[,1:5])
y_test_one <- data.matrix(datasetONE[,6])
head(y_test_one)
#Se importa glmnet y se ejecuta para obtener el modelo Ridge, con *MSE*
library(glmnet)
set.seed(42)
cv.ridge_one <- cv.glmnet(X_train_one, y_train_one, family='gaussian', alpha=0, type.measure='mse')
plot(cv.ridge_one)
cv.ridge_one$lambda.min
min(cv.ridge_one$cvm)
library(glmnet)
set.seed(42)
cv.lasso_one <- cv.glmnet(X_train_one, y_train_one,family='gaussian',  alpha=1, type.measure='mse')
plot(cv.lasso_one)
cv.lasso_one$lambda.min
min(cv.lasso_one$cvm)
#La conclusión es que usar el One Hot Encoder es favorable para el modelo, ya que el error se reduce drásticamente.
#Se obtienen los residuos del modelo con el one hot encoder, ya que es mejor, y relizamos el shapiro test para ver si sigue una distribución normal
predicciones <- predict(cv.lasso_one, newx = X_train)
residuos <- y_train - predicciones
hist(residuos)
qqnorm(residuos)
qqline(residuos)
shapiro.test(residuos)
summary(residuos)
#Como el p-value el menor que 0.05, significa que no sigue una distribución normal
ggplot(salaries, aes(x=rank, y=salary, fill=sex)) +
geom_bar(stat='summary', fun = "mean") +
labs(title = 'Salario vs rank (teniendo en cuenta el sexo)')
ggplot(salaries, aes(x=rank, y=salary, fill=discipline)) +
geom_bar(stat='summary', fun = "mean")+
labs(title = 'Salario vs rank (teniendo en cuenta la disciplina)')
ggplot(salaries, aes(x=discipline, y=salary, fill=sex)) +
geom_bar(stat='summary', fun = "mean") +
labs(title = 'Salario vs disciplina (teniendo en cuenta el sexo)')
ggplot(salaries, aes(x=sex, y=salary)) +
geom_bar(stat='summary', fun = "mean") +
labs(title = 'Salario vs sexo')
ggplot(salaries, aes(x=yrs.since.phd, y=salary)) +
geom_point(aes(color = sex)) + stat_smooth(method = lm, se = FALSE) +
labs(title = 'Salario vs años tras phd (teniendo en cuenta sexo)')
ggplot(salaries, aes(x=yrs.since.phd, y=salary)) +
geom_point(aes(color = sex)) + stat_smooth(method = lm, se = FALSE) +
facet_grid(rank ~ .) +
labs(title = 'Salario vs años tras phd (teniendo en cuenta sexo y rango)')
ggplot(salaries, aes(x=yrs.since.phd, y=salary)) +
geom_point(aes(color = discipline)) + stat_smooth(method = lm, se = FALSE) +
facet_grid(rank ~ .) +
labs(title = 'Salario vs años tras phd (teniendo en cuenta disciplina y rango)')
ggplot(salaries, aes(x=yrs.service, y=salary)) +
geom_point(aes(color = sex)) + stat_smooth(method = lm, se = FALSE) +
labs(title = 'Salario vs años en servicio (teniendo en cuenta sexo)')
ggplot(salaries, aes(x=yrs.service, y=salary)) +
geom_point(aes(color = sex)) + stat_smooth(method = lm, se = FALSE) +
facet_grid(rank ~ .) +
labs(title = 'Salario vs años en servicio (teniendo en cuenta sexo y rango)')
ggplot(salaries, aes(x=yrs.service, y=salary)) +
geom_point(aes(color = discipline)) + stat_smooth(method = lm, se = FALSE) +
facet_grid(rank ~ .) +
labs(title = 'Salario vs años en servicio (teniendo en cuenta disciplina y rango)')
ggplot(salaries, aes(x=yrs.service, y=yrs.since.phd)) +
geom_point() + stat_smooth(method = lm, se = FALSE) +
labs(title = 'Años tras phd vs años en servicio')
ggplot(female_salaries, aes(x=salary)) + geom_histogram() +
labs(title = 'Histograma salario mujeres')
plot(density(female_salaries$salary))
female_salaries = filter(salaries, salaries$sex=='Female')
male_salaries = filter(salaries, salaries$sex=='Male')
plot(density(female_salaries$salary))
ggplot(female_salaries, aes(x=salary)) + geom_histogram() +
labs(title = 'Histograma salario mujeres')
plot(density(female_salaries$salary))
plot(density(female_salaries$salary), title('a'))
plot(density(female_salaries$salary))
ggplot(female_salaries, aes(x=salary)) + geom_histogram() +
labs(title = 'Histograma salario mujeres')
ggplot(male_salaries, aes(x=salary)) + geom_histogram() +
labs(title = 'Histograma salario hombres')
plot(density(female_salaries$salary))
#realizamos la carga del dataset
df<- read.csv("Salaries.csv")
dim(df) #revisamos dimensiones
head(df) #comprobamos carga
summary(df)
str(df)
apply(is.na(df),2,sum)/nrow(df)*100 #revisión de nulos
#revisión de variables categóricas
factores<- which(sapply(df,class)=="character")
for (i in 1:length(factores)){
print(unique(df[,factores[i]]))
}
library(ggplot2)
ggplot(df) +
geom_histogram(mapping = aes(salary), color = "red", fill = "lightblue", alpha = 0.6)
ggplot(df) +
geom_boxplot(mapping = aes(x = salary), outlier.colour = "red")
df <- df[df$salary<200000,]
ggplot(df) +
geom_boxplot(mapping = aes(x = salary), outlier.colour = "red")
ggplot(df) +
geom_bar(mapping = aes(rank, fill = rank), color = "black")
ggplot(df) +
geom_bar(mapping = aes(discipline, fill = discipline), color = "black")
ggplot(df) +
geom_histogram(mapping = aes(yrs.since.phd), color = "red", fill = "lightblue", alpha = 0.6)
ggplot(df) +
geom_boxplot(mapping = aes(x =  yrs.since.phd), outlier.colour = "red")
histograma <- function(dataset,vari){
return((ggplot(dataset) +
geom_histogram(mapping = aes({{vari}}), color = "red", fill = "lightblue", alpha = 0.6)
))
}
caja <- function(dataset, vari){
return((ggplot(dataset) +
geom_boxplot(mapping = aes(x =  {{vari}}), outlier.colour = "red")))
}
histograma(df,yrs.service)
caja(df, yrs.service)
df <- df[df$yrs.service<55,]
caja(df, yrs.service)
barras  <- function(dataset, vari) {
return((ggplot(dataset) +
geom_bar(mapping = aes({{vari}}, fill = {{vari}}), color = "black")))
}
barras(df, sex)
histsalvar <- function(dataset,vari){
return((ggplot(dataset, aes(x=salary, fill={{vari}})) +
geom_histogram(binwidth=10000, position="dodge", color = "black")
))
}
boxsalvar <- function(dataset,vari){
return((ggplot(dataset, aes({{vari}} , salary)) +  geom_boxplot() + coord_flip()
))
}
histsalvar(df, rank)
boxsalvar(df, rank)
library(dplyr)
summarise(group_by(df, rank), salarios =(mean(salary))) %>% arrange(salarios)
histsalvar(df, discipline)
boxsalvar(df, discipline)
df[df$discipline== "A" & df$salary> 190000,]
#Eliminamos el outlier
df <- df[-(which(df$discipline== "A" & df$salary == 194800)),]
boxsalvar(df, discipline)
summarise(group_by(df, discipline), salarios =(mean(salary))) %>% arrange(salarios)
ggplot(df) +
geom_point(mapping = aes(salary, yrs.since.phd)) + geom_smooth(aes(salary, yrs.since.phd))
ggplot(df) +
geom_point(mapping = aes(salary, yrs.service)) + geom_smooth(aes(salary, yrs.service))
histsalvar(df, sex)
boxsalvar(df, sex)
summarise(group_by(df, sex), salarios =(mean(salary))) %>% arrange(salarios)
df$X<- NULL
hombres <- as.numeric(df$salary[df$sex == "Male"])
mujeres <- as.numeric(df$salary[df$sex == "Female"])
par(mfrow=c(1,2))
hist(hombres)
hist(mujeres)
shapiro.test(hombres)
qqnorm(hombres)
qqline(hombres)
shapiro.test(mujeres)
qqnorm(mujeres)
qqline(mujeres)
length(hombres)
length(mujeres)
ks.test(hombres, mujeres)
oneway.test(df$salary ~ df$sex)
oneway.test(df$salary ~ df$sex, var.equal = TRUE)
histsalvar(df, sex) +
facet_grid(rank~.)
tab <- table(df$sex, df$rank)
prop.table(tab, 1)*100
library(car)
df$sex <- recode(df$sex , " 'Female' = '0' ; 'Male' = '1'")
colnames(df)[5] <- "hombre"
df$rank <- recode(df$rank , " 'Prof' = '3' ; 'AssocProf' = '2' ; 'AsstProf' = '1'")
df$discipline <- recode(df$discipline , " 'B' = '0' ; 'A' = '1'")
colnames(df)[2] <- "disciplineA"
library(Hmisc)
corrs <- rcorr(as.matrix(df))
corrs$r[6,]
corrs$P[6,]
(corrs$r[6,])^2
X <- data.matrix(subset(df, select= - salary))
train <- X[1:311,]
test <- X[312:nrow(df), ]
X_train <- data.matrix(train)
y_train <- data.matrix(df[1:311,]$salary)
X_test <- data.matrix(test)
y_test <- data.matrix(df[312:nrow(df),]$salary)
library(glmnet)
set.seed(42)
cv.ridge <- cv.glmnet(X_train, y_train, family='gaussian', alpha=0.0, type.measure='mse')
# Resultados
plot(cv.ridge)
cv.ridge$lambda.min
min(cv.ridge$cvm)
coef(cv.ridge, s = cv.ridge$lambda.min)
set.seed(42)
cv.lasso <- cv.glmnet(X_train, y_train, family='gaussian', alpha=1, type.measure='mse')
# Resultados
plot(cv.lasso)
cv.lasso$lambda.min
min(cv.lasso$cvm)
coef(cv.lasso, s=cv.lasso$lambda.min)
MSE_Ridge <- min(cv.ridge$cvm)
MSE_Lasso <- min(cv.lasso$cvm)
MSE_Ridge -  MSE_Lasso
prediction <- predict.glmnet(cv.lasso$glmnet.fit, newx=X_test, s=cv.ridge$lambda.min)
residuals <- prediction - y_test
residuals
residuos <- as.data.frame(residuals)
ggplot(residuos, aes(x=residuos$s1)) +
geom_histogram(aes(y=..density..),
binwidth=10000,
colour="black", fill="blue") +
geom_density(alpha=.2, fill="red")
qqnorm(residuals)
qqline(residuals)
shapiro.test(residuals)
# Leo el conjunto de datos
salaries = read.csv('Salaries.csv')
salaries <- subset(salaries, select = - X)
# Ejecuto la libreria ggplot2 para visualizaciones
# install.packages("ggplot2")
library(ggplot2)
# Ejecuto la libreria dplyr para realizar modificaciones al Dataframe
# install.packages("dplyr")
library(dplyr)
# Ejecuto la libreria glmnet para la regularización.
# install.packages('glmnet')
library(glmnet)
# Ejecuto la librería MLmetrics para calcular el MSE
# install.packages('MLmetrics')
library(MLmetrics)
summary(salaries)
salaries$rank <- factor(salaries$rank)
salaries$discipline <- factor(salaries$discipline)
salaries$sex <- factor(salaries$sex)
summary(salaries)
# Salario vs rank (teniendo en cuenta el sexo)
ggplot(salaries, aes(x=rank, y=salary, fill=sex)) +
geom_bar(stat='summary', fun = "mean") +
labs(title = 'Salario vs rank (teniendo en cuenta el sexo)')
# Salario vs rank (teniendo en cuenta la disciplina)
ggplot(salaries, aes(x=rank, y=salary, fill=discipline)) +
geom_bar(stat='summary', fun = "mean") +
labs(title = 'Salario vs rank (teniendo en cuenta la disciplina)')
# Salario vs disciplina (teniendo en cuenta el sexo)
ggplot(salaries, aes(x=discipline, y=salary, fill=sex)) +
geom_bar(stat='summary', fun = "mean") +
labs(title = 'Salario vs disciplina (teniendo en cuenta el sexo)')
# Salario vs sexo
ggplot(salaries, aes(x=sex, y=salary)) +
geom_bar(stat='summary', fun = "mean") +
labs(title = 'Salario vs sexo')
# Salario vs años tras phd (teniendo en cuenta sexo)
ggplot(salaries, aes(x=yrs.since.phd, y=salary)) +
geom_point(aes(color = sex)) + stat_smooth(method = lm, se = FALSE) +
labs(title = 'Salario vs años tras phd (teniendo en cuenta sexo)')
# Salario vs años tras phd (teniendo en cuenta sexo y rango)
ggplot(salaries, aes(x=yrs.since.phd, y=salary)) +
geom_point(aes(color = sex)) + stat_smooth(method = lm, se = FALSE) +
facet_grid(rank ~ .) +
labs(title = 'Salario vs años tras phd (teniendo en cuenta sexo y rango)')
# Salario vs años tras phd (teniendo en cuenta disciplina y rango)
ggplot(salaries, aes(x=yrs.since.phd, y=salary)) +
geom_point(aes(color = discipline)) + stat_smooth(method = lm, se = FALSE) +
facet_grid(rank ~ .) +
labs(title = 'Salario vs años tras phd (teniendo en cuenta disciplina y rango)')
# Salario vs años en servicio (teniendo en cuenta sexo)
ggplot(salaries, aes(x=yrs.service, y=salary)) +
geom_point(aes(color = sex)) + stat_smooth(method = lm, se = FALSE) +
labs(title = 'Salario vs años en servicio (teniendo en cuenta sexo)')
# Salario vs años en servicio (teniendo en cuenta sexo y rango)
ggplot(salaries, aes(x=yrs.service, y=salary)) +
geom_point(aes(color = sex)) + stat_smooth(method = lm, se = FALSE) +
facet_grid(rank ~ .) +
labs(title = 'Salario vs años en servicio (teniendo en cuenta sexo y rango)')
# Salario vs años en servicio (teniendo en cuenta disciplina y rango)
ggplot(salaries, aes(x=yrs.service, y=salary)) +
geom_point(aes(color = discipline)) + stat_smooth(method = lm, se = FALSE) +
facet_grid(rank ~ .) +
labs(title = 'Salario vs años en servicio (teniendo en cuenta disciplina y rango)')
# Años tras phd vs años en servicio
ggplot(salaries, aes(x=yrs.service, y=yrs.since.phd)) +
geom_point() + stat_smooth(method = lm, se = FALSE) +
labs(title = 'Años tras phd vs años en servicio')
cor(salaries$yrs.since.phd, salaries$yrs.service)
female_salaries = filter(salaries, salaries$sex=='Female')
male_salaries = filter(salaries, salaries$sex=='Male')
plot(density(female_salaries$salary))
ggplot(female_salaries, aes(x=salary)) + geom_histogram() +
labs(title = 'Histograma salario mujeres')
plot(density(female_salaries$salary))
ggplot(male_salaries, aes(x=salary)) + geom_histogram() +
labs(title = 'Histograma salario hombres')
plot(density(male_salaries$salary))
qqnorm(male_salaries$salary)
qqline(male_salaries$salary)
shapiro.test(male_salaries$salary)
qqnorm(female_salaries$salary)
qqline(female_salaries$salary)
shapiro.test(female_salaries$salary)
X <- data.matrix(subset(salaries  , select= - c(salary)))
y <- as.double(as.matrix(salaries$salary))
head(X)
head(y)
X_train <- X[1:317,]
y_train <- y[1:317]
X_test <- X[318:397,]
y_test <- y[318:397]
# Aplicamos Ridge
cv.ridge <- cv.glmnet(X_train, y_train, family='gaussian', alpha=0, type.measure='mse')
# Resultados
plot(cv.ridge)
coef(cv.ridge, s=cv.ridge$lambda.min)
min(cv.ridge$cvm)
# Aplicamos Lasso
cv.lasso <- cv.glmnet(X_train, y_train, family='gaussian', alpha=1, type.measure='mse')
# Resultados
plot(cv.lasso)
coef(cv.lasso, s=cv.lasso$lambda.min)
min(cv.lasso$cvm)
MSE(predict(cv.ridge$glmnet.fit, newx=X_test, s=cv.ridge$lambda.min), y_test)
MSE(predict(cv.lasso$glmnet.fit, newx=X_test, s=cv.lasso$lambda.min), y_test)
salariesOHE <- model.matrix(salary~.-1, salaries)
X <- data.matrix(salariesOHE)
y <- as.double(as.matrix(salaries$salary))
X_train_OHE <- X[1:317,]
y_train_OHE <- y[1:317]
X_test_OHE <- X[318:397,]
y_test_OHE <- y[318:397]
# Aplicamos Ridge
cv.ridge_ohe <- cv.glmnet(X_train_OHE, y_train_OHE, family='gaussian', alpha=0, type.measure='mse')
# Resultados
plot(cv.ridge_ohe)
coef(cv.ridge_ohe, s=cv.ridge$lambda.min)
min(cv.ridge_ohe$cvm)
# Aplicamos Lasso
cv.lasso_ohe <- cv.glmnet(X_train_OHE, y_train_OHE, family='gaussian', alpha=1, type.measure='mse')
# Resultados
plot(cv.lasso_ohe)
coef(cv.lasso_ohe, s=cv.lasso$lambda.min)
min(cv.lasso_ohe$cvm)
MSE(predict(cv.ridge_ohe$glmnet.fit, newx=X_test_OHE, s=cv.ridge$lambda.min), y_test_OHE)
MSE(predict(cv.lasso_ohe$glmnet.fit, newx=X_test_OHE, s=cv.lasso$lambda.min), y_test_OHE)
residuals_ridge = y_test_OHE - predict(cv.ridge_ohe$glmnet.fit, newx=X_test_OHE, s=cv.ridge_ohe$lambda.min)
hist(residuals_ridge)
qqnorm(residuals_ridge)
qqline(residuals_ridge)
shapiro.test(residuals_ridge)
residuals_lasso = y_test_OHE - predict(cv.lasso_ohe$glmnet.fit, newx=X_test_OHE, s=cv.lasso_ohe$lambda.min)
hist(residuals_lasso)
qqnorm(residuals_lasso)
qqline(residuals_lasso)
shapiro.test(residuals_lasso)
# Leo el conjunto de datos
salaries = read.csv('Salaries.csv')
salaries <- subset(salaries, select = - X)
# Ejecuto la libreria ggplot2 para visualizaciones
# install.packages("ggplot2")
library(ggplot2)
# Ejecuto la libreria dplyr para realizar modificaciones al Dataframe
# install.packages("dplyr")
library(dplyr)
# Ejecuto la libreria glmnet para la regularización.
# install.packages('glmnet')
library(glmnet)
# Ejecuto la librería MLmetrics para calcular el MSE
# install.packages('MLmetrics')
library(MLmetrics)
summary(salaries)
salaries$rank <- factor(salaries$rank)
salaries$discipline <- factor(salaries$discipline)
salaries$sex <- factor(salaries$sex)
summary(salaries)
# Salario vs rank (teniendo en cuenta el sexo)
ggplot(salaries, aes(x=rank, y=salary, fill=sex)) +
geom_bar(stat='summary', fun = "mean") +
labs(title = 'Salario vs rank (teniendo en cuenta el sexo)')
# Salario vs rank (teniendo en cuenta la disciplina)
ggplot(salaries, aes(x=rank, y=salary, fill=discipline)) +
geom_bar(stat='summary', fun = "mean") +
labs(title = 'Salario vs rank (teniendo en cuenta la disciplina)')
# Salario vs disciplina (teniendo en cuenta el sexo)
ggplot(salaries, aes(x=discipline, y=salary, fill=sex)) +
geom_bar(stat='summary', fun = "mean") +
labs(title = 'Salario vs disciplina (teniendo en cuenta el sexo)')
# Salario vs sexo
ggplot(salaries, aes(x=sex, y=salary)) +
geom_bar(stat='summary', fun = "mean") +
labs(title = 'Salario vs sexo')
# Salario vs años tras phd (teniendo en cuenta sexo)
ggplot(salaries, aes(x=yrs.since.phd, y=salary)) +
geom_point(aes(color = sex)) + stat_smooth(method = lm, se = FALSE) +
labs(title = 'Salario vs años tras phd (teniendo en cuenta sexo)')
# Salario vs años tras phd (teniendo en cuenta sexo y rango)
ggplot(salaries, aes(x=yrs.since.phd, y=salary)) +
geom_point(aes(color = sex)) + stat_smooth(method = lm, se = FALSE) +
facet_grid(rank ~ .) +
labs(title = 'Salario vs años tras phd (teniendo en cuenta sexo y rango)')
# Salario vs años tras phd (teniendo en cuenta disciplina y rango)
ggplot(salaries, aes(x=yrs.since.phd, y=salary)) +
geom_point(aes(color = discipline)) + stat_smooth(method = lm, se = FALSE) +
facet_grid(rank ~ .) +
labs(title = 'Salario vs años tras phd (teniendo en cuenta disciplina y rango)')
# Salario vs años en servicio (teniendo en cuenta sexo)
ggplot(salaries, aes(x=yrs.service, y=salary)) +
geom_point(aes(color = sex)) + stat_smooth(method = lm, se = FALSE) +
labs(title = 'Salario vs años en servicio (teniendo en cuenta sexo)')
# Salario vs años en servicio (teniendo en cuenta sexo y rango)
ggplot(salaries, aes(x=yrs.service, y=salary)) +
geom_point(aes(color = sex)) + stat_smooth(method = lm, se = FALSE) +
facet_grid(rank ~ .) +
labs(title = 'Salario vs años en servicio (teniendo en cuenta sexo y rango)')
# Salario vs años en servicio (teniendo en cuenta disciplina y rango)
ggplot(salaries, aes(x=yrs.service, y=salary)) +
geom_point(aes(color = discipline)) + stat_smooth(method = lm, se = FALSE) +
facet_grid(rank ~ .) +
labs(title = 'Salario vs años en servicio (teniendo en cuenta disciplina y rango)')
# Años tras phd vs años en servicio
ggplot(salaries, aes(x=yrs.service, y=yrs.since.phd)) +
geom_point() + stat_smooth(method = lm, se = FALSE) +
labs(title = 'Años tras phd vs años en servicio')
cor(salaries$yrs.since.phd, salaries$yrs.service)
female_salaries = filter(salaries, salaries$sex=='Female')
male_salaries = filter(salaries, salaries$sex=='Male')
ggplot(female_salaries, aes(x=salary)) + geom_histogram() +
labs(title = 'Histograma salario mujeres')
plot(density(female_salaries$salary))
ggplot(male_salaries, aes(x=salary)) + geom_histogram() +
labs(title = 'Histograma salario hombres')
plot(density(male_salaries$salary))
qqnorm(male_salaries$salary)
qqline(male_salaries$salary)
shapiro.test(male_salaries$salary)
qqnorm(female_salaries$salary)
qqline(female_salaries$salary)
shapiro.test(female_salaries$salary)
X <- data.matrix(subset(salaries  , select= - c(salary)))
y <- as.double(as.matrix(salaries$salary))
head(X)
head(y)
X_train <- X[1:317,]
y_train <- y[1:317]
X_test <- X[318:397,]
y_test <- y[318:397]
# Aplicamos Ridge
cv.ridge <- cv.glmnet(X_train, y_train, family='gaussian', alpha=0, type.measure='mse')
# Resultados
plot(cv.ridge)
coef(cv.ridge, s=cv.ridge$lambda.min)
min(cv.ridge$cvm)
# Aplicamos Lasso
cv.lasso <- cv.glmnet(X_train, y_train, family='gaussian', alpha=1, type.measure='mse')
# Resultados
plot(cv.lasso)
coef(cv.lasso, s=cv.lasso$lambda.min)
min(cv.lasso$cvm)
MSE(predict(cv.ridge$glmnet.fit, newx=X_test, s=cv.ridge$lambda.min), y_test)
MSE(predict(cv.lasso$glmnet.fit, newx=X_test, s=cv.lasso$lambda.min), y_test)
salariesOHE <- model.matrix(salary~.-1, salaries)
X <- data.matrix(salariesOHE)
y <- as.double(as.matrix(salaries$salary))
X_train_OHE <- X[1:317,]
y_train_OHE <- y[1:317]
X_test_OHE <- X[318:397,]
y_test_OHE <- y[318:397]
# Aplicamos Ridge
cv.ridge_ohe <- cv.glmnet(X_train_OHE, y_train_OHE, family='gaussian', alpha=0, type.measure='mse')
# Resultados
plot(cv.ridge_ohe)
coef(cv.ridge_ohe, s=cv.ridge$lambda.min)
min(cv.ridge_ohe$cvm)
# Aplicamos Lasso
cv.lasso_ohe <- cv.glmnet(X_train_OHE, y_train_OHE, family='gaussian', alpha=1, type.measure='mse')
# Resultados
plot(cv.lasso_ohe)
coef(cv.lasso_ohe, s=cv.lasso$lambda.min)
min(cv.lasso_ohe$cvm)
MSE(predict(cv.ridge_ohe$glmnet.fit, newx=X_test_OHE, s=cv.ridge$lambda.min), y_test_OHE)
MSE(predict(cv.lasso_ohe$glmnet.fit, newx=X_test_OHE, s=cv.lasso$lambda.min), y_test_OHE)
residuals_ridge = y_test_OHE - predict(cv.ridge_ohe$glmnet.fit, newx=X_test_OHE, s=cv.ridge_ohe$lambda.min)
hist(residuals_ridge)
qqnorm(residuals_ridge)
qqline(residuals_ridge)
shapiro.test(residuals_ridge)
residuals_lasso = y_test_OHE - predict(cv.lasso_ohe$glmnet.fit, newx=X_test_OHE, s=cv.lasso_ohe$lambda.min)
hist(residuals_lasso)
qqnorm(residuals_lasso)
qqline(residuals_lasso)
shapiro.test(residuals_lasso)
